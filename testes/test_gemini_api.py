import streamlit as st
import google.generativeai as genai
# Remover importa√ß√£o de Tool
# from google.generativeai.types import Tool # Removido
# Importar GenerationConfig
from google.generativeai.types import GenerationConfig
# Remover GenerateContentConfig e GoogleSearch
import os

st.set_page_config(page_title="Consulta Hospital", layout="centered")
st.title("üè• Consulta Informa√ß√µes do Hospital")

# Tenta carregar a chave da API dos segredos do Streamlit
api_key = st.secrets.get("GEMINI_API_KEY")

if not api_key:
    st.error("Chave da API Gemini n√£o encontrada! Por favor, configure-a em .streamlit/secrets.toml")
    st.code("""
# .streamlit/secrets.toml
GEMINI_API_KEY="SUA_CHAVE_DE_API_AQUI"
""", language="toml")
    st.stop()

try:
    # Configura a API
    genai.configure(api_key=api_key)

    # Usa a interface GenerativeModel
    model_name = 'gemini-2.5-pro-exp-03-25' # Modelo base sem grounding expl√≠cito
    model = genai.GenerativeModel(model_name)
    # Exibe o nome do modelo na interface
    st.caption(f"Modelo em uso: {model_name}")

    # Remove a defini√ß√£o da ferramenta de busca
    # search_tool = Tool(google_search_retrieval={}) # Removido

    st.success("API Key configurada e modelo pronto para consulta.") # Mensagem atualizada

    # Altera o input para pedir o NOME do hospital
    hospital_name_input = st.text_input("Digite o nome do hospital:", placeholder="Ex: Hospital S√≠rio-Liban√™s")

    # Altera o bot√£o e a l√≥gica
    if st.button("Consultar Informa√ß√µes"):
        if hospital_name_input:
            # Valida√ß√£o ajustada para NOME (n√£o pode ser s√≥ n√∫meros)
            if hospital_name_input.isdigit():
                st.warning("Por favor, digite um nome de hospital v√°lido (n√£o apenas n√∫meros).")
            else:
                # Cria o prompt espec√≠fico para a tarefa (sem men√ß√£o √† busca)
                prompt = f"""
    Com base no nome do hospital a seguir: {hospital_name_input}

    Usando seu conhecimento interno, realize as seguintes tarefas:
    1.  Identifique o nome completo do estabelecimento de sa√∫de (hospital, cl√≠nica, etc.) associado a este nome.
    2.  Identifique o nome do munic√≠pio e o estado onde este estabelecimento est√° localizado.
    3.  Forne√ßa um breve resumo sobre o munic√≠pio identificado (ex: popula√ß√£o estimada, principal atividade econ√¥mica, localiza√ß√£o geral, indicadores de sa√∫de, indicadores sociais).
    4.  Busque em seus dados por informa√ß√µes sobre a qualidade dos servi√ßos ou atendimento do estabelecimento de sa√∫de identificado.
    5.  Forne√ßa um resumo da rede p√∫blica de sa√∫de do munic√≠pio identificado (ex: quantidade de unidades de sa√∫de para cada tipo de unidade).
    6.  Se houver outros hospiais na regi√£o, identificar se s√£o gerais ou especializados.

    Apresente a resposta de forma clara e organizada, separando cada um dos 5 itens solicitados. Se alguma informa√ß√£o n√£o estiver dispon√≠vel em seus dados, indique isso explicitamente.
    """
                try:
                    # Define a configura√ß√£o de gera√ß√£o com baixa temperatura
                    generation_config = GenerationConfig(
                        temperature=0.2
                    )

                    # Remove men√ß√£o √† busca no spinner
                    with st.spinner("Consultando o Gemini (GenerativeModel API)..."):
                        # Chama a API usando GenerativeModel SEM a ferramenta de busca e com config
                        response = model.generate_content(
                            prompt,
                            generation_config=generation_config # Adiciona config
                            # tools=[search_tool] # Removido
                        )
                    st.subheader("Resultado da Consulta:")

                    # Extrai o texto da resposta (estrutura simples)
                    st.markdown(response.text)

                    # Remove toda a se√ß√£o de metadados de grounding
                    # try:
                    #    # Verifica a exist√™ncia de grounding_metadata diretamente no objeto response
                    #    if hasattr(response, 'grounding_metadata') and response.grounding_metadata:
                    #        st.subheader("Fontes Consultadas (Metadados de Grounding):")
                    #        metadata = response.grounding_metadata
                    #        ... (c√≥digo removido) ...
                    #    # else:
                    #    #     st.caption("Nenhum metadado de grounding retornado.")
                    # except AttributeError:
                    #     st.caption("N√£o foi poss√≠vel acessar os metadados de grounding (atributo n√£o encontrado na resposta).")
                    # except Exception as meta_e:
                    #      st.warning(f"Erro ao processar metadados de grounding: {meta_e}")

                except Exception as e:
                    st.error(f"Erro ao chamar a API Gemini: {e}")
                    # Tratamento de erros espec√≠ficos...
                    if "API key not valid" in str(e):
                        st.warning("Verifique se a API Key em .streamlit/secrets.toml est√° correta e se a API Generative AI est√° habilitada no seu projeto Google Cloud.")
                    # Remove erro espec√≠fico da busca
                    # elif "GoogleSearchRetrieval" in str(e) or "grounding is not supported" in str(e):
                    #      st.warning("Ocorreu um erro relacionado √† ferramenta de busca. Verifique se o modelo suporta grounding ou se h√° restri√ß√µes na API Key.") # Removido
                    elif "exceeded your current quota" in str(e) or "429" in str(e):
                         st.warning("Voc√™ atingiu o limite de requisi√ß√µes da API (quota). Tente novamente mais tarde.")
                    else:
                        st.warning(f"Erro inesperado: {e}")
        else:
            st.warning("Por favor, digite o nome do hospital.")

except Exception as e:
    st.error(f"Ocorreu um erro inesperado ao configurar a API: {e}")
    st.stop()

st.markdown("---")
# Atualiza caption final
st.caption("Aplica√ß√£o para consultar informa√ß√µes de estabelecimentos de sa√∫de usando nome e a API Gemini.")

# Remover a se√ß√£o de c√≥digo relacionada ao CNES 